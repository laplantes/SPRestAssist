"use strict";const axiosConfig={headers:{Accept:"application/json;odata=verbose","content-type":"application/json;odata=verbose"}},getListItemEntityTypeFullName=(e,t)=>{try{return axios.get(`${e}/_api/web/lists/getByTitle('${t}')`)}catch(e){console.log("There was an issue reading the listItemEntityTypeFullName. The error is: ",e)}},getDigestValue=e=>{try{return axios.post(`${e}/_api/contextinfo`)}catch(e){console.log("There was an issue reading the listItemEntityTypeFullName. The error is: ",e)}};export const getItems=e=>{const{url:t,list:s,action:a,query:i=""}=e;return axios.get(`${t}/_api/web/lists/getByTitle('${s}')/${a}?${i}`)};export const createItem=async e=>{const{url:t,list:s,data:a}=e;let i=JSON.parse(JSON.stringify(axiosConfig));const r=await getListItemEntityTypeFullName(t,s),o=await getDigestValue(t),n=`{ '__metadata': { 'type': '${r.data.ListItemEntityTypeFullName}' }, ${a} }`;return i.headers["X-RequestDigest"]=o.data.FormDigestValue,axios.post(`${t}/_api/web/lists/getByTitle('${s}')/items`,n,i)};export const updateItem=async e=>{const{url:t,list:s,data:a,updateId:i,etag:r="*"}=e;let o=JSON.parse(JSON.stringify(axiosConfig));const n=await getListItemEntityTypeFullName(t,s),l=await getDigestValue(t),p=`{ '__metadata': { 'type': '${n.data.ListItemEntityTypeFullName}' }, ${a} }`;return o.headers["X-RequestDigest"]=l.data.FormDigestValue,o.headers["IF-MATCH"]=`${r}`,o.headers["X-HTTP-METHOD"]="MERGE",axios.post(`${t}/_api/web/lists/getByTitle('${s}')/items(${i})`,p,o)};export const deleteItem=async e=>{const{url:t,list:s,itemId:a,etag:i="*"}=e;let r=JSON.parse(JSON.stringify(axiosConfig));const o=await getDigestValue(t);return r.headers["X-RequestDigest"]=o.data.FormDigestValue,r.headers["IF-MATCH"]=`${i}`,axios.delete(`${t}/_api/web/lists/getByTitle('${s}')/items(${a})`,r)};export const getCurrentUserProps=e=>{const{url:t,selectedProperty:s}=e;return axios.get(`${t}/_api/SP.UserProfiles.PeopleManager/GetMyProperties/${s}`)};export const getCurrentUserGroups=async e=>(await axios.get(`${e.url}/_api/web/currentuser/?$expand=Groups&$select=Groups`)).data.Groups;export const verifyCurrentUserGroupMembership=async e=>{const t=await axios.get(`${e.url}/_api/web/currentuser/?$expand=Groups&$select=Groups`);let s=[];return t.data.Groups.forEach((e=>s.push(e.Title))),s.includes(`${e.groupName}`)};
//# sourceMappingURL=sprestassist.min.js.map
