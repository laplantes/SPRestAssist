"use strict";import*as axios from"axios";const axiosConfigMin={headers:{Accept:"application/json;","content-type":"application/json;odata=verbose"}},axiosConfigVerbose={headers:{Accept:"application/json;odata=verbose","content-type":"application/json;odata=verbose"}},getListItemEntityTypeFullName=(e,t)=>{try{return axios.get(`${e}/_api/web/lists/getByTitle('${t}')`)}catch(e){console.log("There was an issue reading the listItemEntityTypeFullName. The error is: ",e)}},getDigestValue=e=>{try{return axios.post(`${e}/_api/contextinfo`)}catch(e){console.log("There was an issue reading the listItemEntityTypeFullName. The error is: ",e)}};export const getItems=e=>{const{url:t,list:s,action:a,query:o="",verbose:i="false"}=e;let r;return i&&(r=axiosConfigVerbose),axios.get(`${t}/_api/web/lists/getByTitle('${s}')/${a}?${o}`)};export const createItem=async e=>{const{url:t,list:s,data:a,verbose:o="false"}=e;let i;o&&(i=axiosConfigVerbose);const r=await getListItemEntityTypeFullName(t,s),n=await getDigestValue(t),l=`{ '__metadata': { 'type': '${r.data.ListItemEntityTypeFullName}' }, ${a} }`;return i.headers["X-RequestDigest"]=n.data.FormDigestValue,axios.post(`${t}/_api/web/lists/getByTitle('${s}')/items`,l,i)};export const updateItem=async e=>{const{url:t,list:s,data:a,updateId:o,etag:i="*",verbose:r="false"}=e;let n;r&&(n=axiosConfigVerbose);const l=await getListItemEntityTypeFullName(t,s),p=await getDigestValue(t),u=`{ '__metadata': { 'type': '${l.data.ListItemEntityTypeFullName}' }, ${a} }`;return n.headers["X-RequestDigest"]=p.data.FormDigestValue,n.headers["IF-MATCH"]=`${i}`,n.headers["X-HTTP-METHOD"]="MERGE",axios.post(`${t}/_api/web/lists/getByTitle('${s}')/items(${o})`,u,n)};export const deleteItem=async e=>{const{url:t,list:s,itemId:a,etag:o="*",verbose:i="false"}=e;let r;i&&(r=axiosConfigVerbose);const n=await getDigestValue(t);return r.headers["X-RequestDigest"]=n.data.FormDigestValue,r.headers["IF-MATCH"]=`${o}`,axios.delete(`${t}/_api/web/lists/getByTitle('${s}')/items(${a})`,r)};export const getCurrentUserProps=e=>{const{url:t,selectedProperty:s,verbose:a="false"}=e;let o;return a&&(o=axiosConfigVerbose),axios.get(`${t}/_api/SP.UserProfiles.PeopleManager/GetMyProperties/${s}`)};export const getCurrentUserGroups=async e=>(await axios.get(`${e.url}/_api/web/currentuser/?$expand=Groups&$select=Groups`)).data.Groups;export const verifyCurrentUserGroupMembership=async e=>{const t=await axios.get(`${e.url}/_api/web/currentuser/?$expand=Groups&$select=Groups`);let s=[];return t.data.Groups.forEach((e=>s.push(e.Title))),s.includes(`${e.groupName}`)};
//# sourceMappingURL=sprestassist.min.js.map
