"use strict";const createConfig=e=>{switch(e){case!1:return{headers:{Accept:"application/json;odata=minimalmetadata","content-type":"application/json;odata=verbose"}};case!0:return{headers:{Accept:"application/json;odata=verbose","content-type":"application/json;odata=verbose"}}}},getListItemEntityTypeFullName=(e,t)=>{try{return axios.get(`${e}/_api/web/lists/getByTitle('${t}')`)}catch(e){console.log("There was an issue reading the listItemEntityTypeFullName. The error is: ",e)}},getDigestValue=e=>{try{return axios.post(`${e}/_api/contextinfo`)}catch(e){console.log("There was an issue reading the listItemEntityTypeFullName. The error is: ",e)}};export const getItems=e=>{const{url:t,list:a,action:s,query:r="",verbose:i=!1}=e,o=createConfig(i);return axios.get(`${t}/_api/web/lists/getByTitle('${a}')/${s}?${r}`,o)};export const createItem=async e=>{const{url:t,list:a,data:s,verbose:r=!1}=e,i=createConfig(r),o=await getListItemEntityTypeFullName(t,a),n=await getDigestValue(t),l=`{ '__metadata': { 'type': '${o.data.ListItemEntityTypeFullName}' }, ${s} }`;return i.headers["X-RequestDigest"]=n.data.FormDigestValue,axios.post(`${t}/_api/web/lists/getByTitle('${a}')/items`,l,i)};export const updateItem=async e=>{const{url:t,list:a,data:s,updateId:r,etag:i="*",verbose:o=!1}=e,n=createConfig(o),l=await getListItemEntityTypeFullName(t,a),p=await getDigestValue(t),u=`{ '__metadata': { 'type': '${l.data.ListItemEntityTypeFullName}' }, ${s} }`;return n.headers["X-RequestDigest"]=p.data.FormDigestValue,n.headers["IF-MATCH"]=`${i}`,n.headers["X-HTTP-METHOD"]="MERGE",axios.post(`${t}/_api/web/lists/getByTitle('${a}')/items(${r})`,u,n)};export const deleteItem=async e=>{const{url:t,list:a,itemId:s,etag:r="*",verbose:i=!1}=e,o=createConfig(i),n=await getDigestValue(t);return o.headers["X-RequestDigest"]=n.data.FormDigestValue,o.headers["IF-MATCH"]=`${r}`,axios.delete(`${t}/_api/web/lists/getByTitle('${a}')/items(${s})`,o)};export const getCurrentUserProps=e=>{const{url:t,selectedProperty:a,verbose:s=!1}=e;createConfig(s);return axios.get(`${t}/_api/SP.UserProfiles.PeopleManager/GetMyProperties/${a}`)};export const getCurrentUserGroups=async e=>(await axios.get(`${e.url}/_api/web/currentuser/?$expand=Groups&$select=Groups`)).data.Groups;export const verifyCurrentUserGroupMembership=async e=>{const t=await axios.get(`${e.url}/_api/web/currentuser/?$expand=Groups&$select=Groups`);let a=[];return t.data.Groups.forEach((e=>a.push(e.Title))),a.includes(`${e.groupName}`)};
//# sourceMappingURL=sprestassist.min.js.map
